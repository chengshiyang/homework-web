import qs from './src/qs';
import request from 'superagent';
import jq from 'jquery';
import './demo/ex-6-race';
import './demo/ex-7-clicks';
import './demo/ex-8-github-api';
import './demo/ex-9-zip.js';
import './demo/ex-10-delay.js';
import './demo/ex-11-last.js';
import './demo/ex-12-fromPromise';

const slice = [].slice;
const toArray = (x => slice.call(x, 0));




const doc = document;

function $(sel) {
    return doc.querySelector(sel);
}

function $$(sel) {
    return doc.querySelectorAll(sel);
}

let $counter = $('#counter');
let count = 0;
let voteStream = qs.fromEvents($('#js-vote'), 'click')
  .map( e => e.target)
  .take(2);

voteStream
    .last()
    .onValue(btn => {
        btn.classList.add('disabled');
        btn.innerText = 'you can vote only two times';
    });

function vote() {
    return qs(emitter => {
        request
        .get('/vote')
        .end((err, res) => {
            if (err) {
                //todo 错误处理
            }
            emitter.emit(res.body.num);
        });
    });
}

let $voteBtn = $('#js-vote');
voteStream.onValue(()=> $voteBtn.innerText = 'voting')
          .flatMap(vote)
          .onValue(() =>$voteBtn.innerText = 'vote')
          .assign($counter, 'innerText');


let inputA = qs.fromEvents($('input#a'), 'keyup').pluck('target', 'value');
let inputB = qs.fromEvents($('input#b'), 'keyup').pluck('target', 'value');
qs.combine([inputA, inputB], (a, b) => a * b).assign($('#result'), 'value');

qs.fromEvents($('input#a'), 'keyup').pluck('target', 'value').onValue( (val) => {console.log(val)});

let $asInput = $('#as-input')
let add = qs.fromEvents($('#btn-add'), 'click').map( () => 1);
let subtract = qs.fromEvents($('#btn-subtract'), 'click').map( () => -1);
let input = qs.fromEvents($asInput, 'keyup')
                  .map(e => parseInt(e.target.value || 0, 10))
                  .toProperty(() => {
                    return 0;
                  })
                  .skipDuplicates( (a, b) => {
                    return a === b;
                  })


let getValue = () => parseInt($asInput.value || 0, 10);

qs.merge([
    add.map( val => val + getValue()),
    subtract.map( val => val + getValue()),
    input
]).onValue( val => {
    $asInput.value = val;
});



// .assign($('#btn-counter'), 'innerText');

// /*
//  * login demo
//  */

let username = qs.fromEvents($('input[name=username]'), 'keyup').map(e => e.target.value);
let password = qs.fromEvents($('input[name=password]'), 'keyup').map(e => e.target.value);
username.and(password).not().onValue( (val) => {
    $('#btn-login').disabled = val;
});




// let loginClick = qs.fromEvents($('#btn-login'), 'click');
// function login () {
//     return qs( emitter => {
//         setTimeout( () => {
//             emitter.error('login failed');
//         }, 2000);
//     });
// }

// let logining = loginClick.flatMap(login);

// loginClick.awaiting(logining).onValue( waiting => {
//     console.log('waiting:' + waiting);
//     $('#btn-login').innerText = waiting ? 'logining...' : 'login';
// }).onError( () => {
//     $('#btn-login').innerText = 'login failed, try again.';
// });

// /*
//  * Card select demo
//  */

// let selectCardId = qs.fromEvents(jq('.card'), 'click')
//     .map( e => e.currentTarget)
//     .scan((prev, target) => {
//         //去除上一个的激活状态
//         if (prev !== target) {
//             prev.classList.remove('active');
//         }
//         return target;
//     })
//     .onValue( (target) => {
//         $betBtn.innerText = '确定投注';
//         //toggle当前这一个的激活状态
//         if (target.classList.contains('active')) {
//             target.classList.remove('active');
//         } else {
//             target.classList.add('active');
//         }
//     })
//     .map(target => {
//         if (target.classList.contains('active')) {
//             return parseInt(target.dataset.id, 10);
//         }
//     });

// let $betBtn = $('#btn-bet');
// let originBetNum = qs.fromEvents($('#bet-num'), 'keyup').map(e => e.target.value);
// let betBtnClick = qs.fromEvents($betBtn, 'click');
// let $remain = $('#remain-num');
// let remainNum = parseInt($remain.innerText, 10);

// let betNum = originBetNum.map( val => val > remainNum ? remainNum : val).assign($('#bet-num'), 'value');

// betNum
// .assign($('#bet-num-result'), 'innerText')
// .map( val => remainNum - val)
// .assign($remain, 'innerText');

// selectCardId.not().assign($('#bet-num'), 'disabled');
// selectCardId.and(betNum).not().assign($betBtn, 'disabled');
// let userData = selectCardId.combine(betNum, (cardId, num) => {
//     return {
//         card: cardId,
//         betNum: num
//     };
// });

// function bet() {
//     return qs(emitter => {
//         request
//         .get('/bet')
//         .end((err, res) => {
//             if (err) {
//                 //todo 错误处理
//             }
//             emitter.emit(res.body);
//         });
//     });
// }

// let betStream = qs.combine([betBtnClick], [userData], (e, userData) => {
//     return userData;
// }).flatMap(bet);

// betBtnClick.awaiting(betStream).onValue( (betting) => {
//     $betBtn.innerText = betting ? '投注中...' : '已投注';
// });

// betStream.onValue(val => {
//     if (val.success) {
//         $betBtn.innerText = '投注成功';
//         $betBtn.disabled = true;
//     }
// });

// var source = qs.seq(100, [1, 2, 3]);
// var result = source.flatMapFirst(x => qs.interval(40, x).take(4));
// var arr = [];
// result.onValue( (x) => {
//     arr.push(x);
// }).onEnd( () => {
//     console.log(arr);
// });


var s = qs(emitter => {
    emitter.emit(1);
}).toProperty();


var s2 = s.filter(val => val !== 2)


var s3 = s2.flatMapLatest( (val) => {
    return qs( emitter => {
        setTimeout( () => {
            emitter.emit(val + 1);
        }, 1000);
    });
});

s2.onValue(val => {
    console.log(val);
});

s3.onValue(val => {
    console.log(val);
});




// qs.seq(100, [1, 2, 3]).skip(2).onValue( (v) => {console.log(v)});
//qs.seq(100, [1, 2, 3, 2]).skipWhile(x => x !== 3).onValue( (v) => {console.log(v)});

//var arrStream = qs.seq(1000, [ [1,2], [], 7, 8, [3,4], [5,6]]);
//arrStream.flatten().onValue( (x) => console.log(x));

// qs.seq(100, [1, 2, 3]).flatten( (v) => [v, v + 2, v * 2]).onValue( (x) => {
//     console.log(x)
// });


// var s1 = qs.seq(500, [1, 2, 3]);
// var s2 = qs.seq(500, [4, 5, 6]).delay(100);
// qs.combine([s1, s2], (a, b) => a + b).onValue( (val) => {
//     console.log(val);
// });



// var a = qs.seq(100, [1, 3]);
// var b = qs.seq(100, [2, 4]).delay(40);
// var c = qs.seq(60, [5, 6, 7]);
// qs.combine([a, b], [c], (a, b, c) => a + b +c).map( val => val * 2).onValue( (val) => {
//     console.log(val);
// }).onEnd(()=> {
//     console.log('end');
// });


// var a = qs.seq(1000, [1,2,3]);
// var b = a.map(function(val){return val + 2});
// var c = a.map(function(val){return val * 2});
// var d = qs.combine([b], [c], function(b, c){return [b,c]});
// d.onValue( (val) => {
//     console.log(val)
// });


// var source = qs.seq(1000, [1, 2, 3]);
// var result = source.flatMap(x => qs.interval(40, x).take(4).map(v => x + ':' + v));
// result.onValue( (v) => {
//     console.log(v);
// }).onEnd( () => {
//     debugger;
//     console.log('end');
// })

//requestStream.assign($counter, 'innerText');
   //.scan((total, val) => total + val, count)
    //.assign($counter, 'innerText');


// var a = qs.seq(1000, [0, 1, 2]);
// var b = qs.seq(1000, [0, 1, 2]).delay(500);
// qs.merge([a,b]).onValue( (val)=> {
//     console.log(val);
// }).onEnd(()=> {
//     console.log('on end');
// });

// a.awaiting(b).onValue(val => console.log(val));


/*var source = qs.seq(100, [1, 2, 2, 3, 1,3,3,3]);
source.skipDuplicates().onValue( (val) => {
    console.log(val);
});*/

    //.scan((total, val) => total + val, count)
    //.assign($counter, 'innerText');



var source = qs.seq(100, [1, 2, 2, 3]);
var result = source.scan((prev, next) => {
    return next + prev;
}, 0).onValue((val) => {
    console.log('scan:' + val);
});

//let seqStream = qs.seq(100, [1, 2, 3,4,5,6]);

/*seqStream
.takeWhile( x => x < 4)
.onValue( (val) => {
    console.log('takeWhile:' + val);
})
.onEnd( () => {
    console.log('stream ended 1');
});*/
/*

seqStream
.filter( val => val % 2 === 0)
.onValue( (val) => {
    console.log('filter:' + val);
}).onEnd( () => {
    console.log('stream ended 2');
});*/


/*seqStream.debounce(200).onValue( (val) => {
    console.log(val);
}).onEnd( () => {
    console.log('stream end');
});*/

/** 永远不会停止的一个流 */
/*var stream = qs.interval(1000, 1).onValue( (val) => {
    console.log(val);
});*/


/*qs.delay(4000, 10).onValue( (val) => {
    console.log('delay:' + val);
});*/

// let scrollTopStream = qs(emitter => {
//     emitter.emit(window.scrollY);
//     window.addEventListener('scroll', () => {
//         emitter.emit(window.scrollY);
//     });
// });


// scrollTopStream.throttle(100).onValue( val => {
//     console.log(val);
// });
/*.filter(val => val % 2 === 0).onValue( val => {
    console.log('filter top:' + val);
});*/








/*
var voteRequest = qs.stream((pipe) =>{
    request.get('/vote')
        .end((err, res) => {
            if (err) {
                return pipe(qs.Error());
            }
            pipe(res.body.num);
        });
});

voteStream.assign('text', 'voting...') //改变按钮文案
    .assign('attr', 'disabled') //禁用按钮
    .awaiting(voteRequest) //声明等待vote的处理
    .onValue((num) => {
        $('#js-vote').text("vote successfully");
        $('#counter').text(num); //如果成功改变投票数的值
    })
    .onError(() => {
        $('#js-vote').text('vote failed, try again');
    });
*/
