import {createStreamConstructor, createPropertyConstructor} from './common';
const END = 'buff_end';


const mixin = {
    init({time}) {
        this._time = time;
        this.$handler = (e) => this._handleValue(e);
        this._buff = [];
        this._shiftBuff = () => {
            const val = this._buff.shift();
            if (val === END) {
                this.emitEnd();
            } else {
                this.emitValue(val);
            }
        }
    },

    _free() {
        this._buff = null;
        this._shiftBuff = null;
    },

    _handleValue(x) {
        this._buff.push(x);
        setTimeout(this._shiftBuff, this._time);
    },

    _handleEnd() {
        this._buff.push(END);
        setTimeout(this._shiftBuff, this._time);
    }
};

const S = createStreamConstructor('delay', mixin);
const P = createPropertyConstructor('delay', mixin);


export default function delay(source, time) {
    return new (source._ofSameType(S, P))(source, {time});
};
