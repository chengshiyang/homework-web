import Stream from '../Stream';
import Property from '../Property';
import extend from '../polyfill/extend';
import {ANY, VALUE, END, ERROR} from '../constants/events';

const commonMixin = {
    init() {},
    _free() {},

    _handleAny(e) {
        switch(e.type) {
            case VALUE: return this._handleValue(e.value);
            case ERROR: return this._handleError(e.value);
            case ANY: return this._handleValue(e);
            case END: return this._handleEnd();
        }
    },

    _handleValue(x) {
        this.emitValue(x);
    },

    _handleEnd() {
        this.emitEnd();
    },

    _handleError(e) {
        this.emitError(e);
    },

    _onActivation() {
        this._source.onAny(this._$handleAny);
    },

    _onDeactivation() {
        this._source.offAny(this._$handleAny);
    }
};


function createStreamConstructor(name, mixin) {
    function NewStream(source, options) {
        Stream.call(this);
        this._source = source;
        this._name = `${source._name}.${name}`;
        this._$handleAny = (e) => this._handleAny(e);
        this.init(options);
    }

    NewStream.prototype = Object.create(Stream.prototype);
    extend(NewStream.prototype, commonMixin, {
        _clear() {
            Stream.prototype._clear.call(this);
            this._free();
            this._source = null;
            this._$handleAny = null;
        }
    }, mixin);
    return NewStream;
}





function createPropertyConstructor(name, mixin) {
    function NewProperty(source, options) {
        Property.call(this);
        this._source = source;
        this._name = `${source._name}.${name}`;
        this._$handleAny = (e) => this._handleAny(e);
        this.init(options);
    }

    NewProperty.prototype = Object.create(Property.prototype);
    extend(NewProperty.prototype, commonMixin, {
        _clear() {
            Property.prototype._clear.call(this);
            this._free();
            this._source = null;
            this._$handleAny = null;
        }
    }, mixin);
    return NewProperty;
}



function createTimeBaseStreamConstructor(name, mixin) {
    function TimeBaseStream(wait, options) {
        Stream.call(this);
        this._wait = wait;
        this._intervalId = null;
        this._name = `${name}Stream`;
        this._$onTick = () => this._onTick();
        this.init(options);
    }

    TimeBaseStream.prototype = Object.create(Stream.prototype);
    extend(TimeBaseStream.prototype, {
        init() {},
        _free() {},
        _onActivation() {
            this._intervalId = setInterval(this._$onTick, this._wait);
        },

        _onDeactivation() {
            if (this._intervalId !== null) {
                clearInterval(this._intervalId);
                this._intervalId = null;
            }
        },

        _clear() {
            Stream.prototype._clear.call(this);
            this._free();
            this._$onTick = null;
        }
    }, mixin);
    return TimeBaseStream;
}


export {
    createStreamConstructor,
    createTimeBaseStreamConstructor,
    createPropertyConstructor
};
