import {createStreamConstructor, createPropertyConstructor} from './common';
import {END} from '../constants/events';
import now from '../polyfill/now';

const mixin = {
    init({ wait, immediate }) {
        this._wait = Math.max(0, wait);
        this._immediate = immediate;
        this._lastAttempt = 0;
        this._timeoutId = null;
        this._laterValue = null;
        this._endLater = false;
        this._$later = () => this._later();
    },

    _free() {
        this._laterValue = null;
        this._$later = null;
    },

    _handleValue(x) {
        if (this._activating) {
            this.emitValue(x);
        } else {
            this._lastAttempt = now();
            if (this._immediate && !this._timeoutId) {
                this.emitValue(x);
            }
            if (!this._timeoutId) {
                this._timeoutId = setTimeout(this._$later, this._wait);
            }
            if (!this._immediate) {
                this._laterValue = x;
            }
        }
    },

    _handleEnd() {
        if (this._activating) {
            this.emitEnd();
        } else {
            if (this._timeoutId && !this._immediate) {
                this._endLater = true;
            } else {
                this.emitEnd();
            }
        }
    },

    _later() {
        let last = now() - this._lastAttempt;
        if (last < this._wait && last >= 0) {
            this._timeoutId = setTimeout(this._$later, this._wait - last);
        } else {
            this._timeoutId = null;
            if (!this._immediate) {
                this.emitValue(this._laterValue);
                this._laterValue = null;
            }
            if (this._endLater) {
                this.emitEnd();
            }
        }
    }

};

const S = createStreamConstructor('debounce', mixin);
const P = createPropertyConstructor('debounce', mixin);

export default function debounce(source, wait, immediate) {
    return new (source._ofSameType(S, P))(source, {wait, immediate});
}

