import extend from './polyfill/extend';
import {VALUE, END, ANY, ERROR} from './constants/events';
import {remove, concat, contains} from './polyfill/list';
function Dispatcher() {
    this._cbs = [];
    this._inLoop = 0;
    this._removedCbs = [];
}


function callSubcribers(type, fn, event) {
    if (type === ANY) {
        fn(event);
    } else if (type === event.type) {
        if (type === VALUE || type === ERROR) {
            fn(event.value);
        } else if (type === END){
            fn();
        }
    }
}


extend(Dispatcher.prototype, {
    add(type, fn) {
        this._cbs.push({type, fn});
    },

    remove(type, fn) {
        let cbs = this._cbs;
        let index = null;
        for (let i = 0, len = cbs.length; i < len; i++) {
            let cb = cbs[i];
            if (type === cb.type && cb.fn === fn) {
                index = i;
            }
        }
        //如果在通知的循环中，则将移除的cb添加到_removeCbs中
        if (this._inLoop !== 0 && index !== null) {
            this._removedCbs.push(this._cbs[index]);
        }
        this._cbs = remove(this._cbs, index);

        return this._cbs.length;
    },



    dispatch(event, source) {
        this._inLoop++;
        for (let i = 0, cbs = this._cbs; i < cbs.length; i++) {
            let cb = cbs[i];
            if (this._cbs === null) { break; } //if cleanup
            if (contains(this._removedCbs, cb)) { continue; } //移除的话，不需要继续执行
            callSubcribers(cb.type, cb.fn, event);
        }
        this._inLoop--;
        if (this._inLoop === 0) {
            this._removedCbs = [];
        }
    },

    cleanup() {
        this._cbs = null;
        this._removedCbs = null;
    }
});


export {Dispatcher, callSubcribers};