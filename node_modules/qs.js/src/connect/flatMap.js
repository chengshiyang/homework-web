import extend from '../polyfill/extend';
import never from '../functions/never';
import {VALUE, ANY, END, ERROR} from '../constants/events';
import {forEach, concat, findBy, remove} from '../polyfill/list';
import Common from './common';



function FlatMap(source, fn, options) {
    Common.call(this, options);
    this._source = source;
    this._fn = fn;
    this._sourceEnded = false;
    this._$handlerSource = (e) => this._handleSource(e);
}

FlatMap.prototype = Object.create(Common.prototype);

extend(FlatMap.prototype, {
    _name: 'flatMap',

    _onActivation () {
        Common.prototype._onActivation.call(this);
        if (this.state.active) {
            //active状态下监听souce的所有事件
            this._source.onAny(this._$handlerSource);
        }
    },

    _onDeactivation() {
        Common.prototype._onDeactivation.call(this);
        this._source.offAny(this._$handlerSource);
    },

    _handleSource(e) {
        let eventType = e.type;
        if (eventType === VALUE) {
            //使用source的value来spawn新的流，this._fn会返回新的流
            this._add(e.value, this._fn);
        } else if (eventType === ERROR) {
            this.emitError(e.value);
        } else if (eventType === END) {
            //源头结束，而spawn出来的流都已经结束，可以直接发出结束
            if (this._isEnd()) {
                this.emitEnd();
            }
            this._sourceEnded = true;
        }
    },

    _onEnd() {
        //如果源头还没有结束，先hold着，后面还有新的value进来要spawn
        if (this._sourceEnded) {
            //如果源头已经结束，就可以emitEnd了
            this.emitEnd();
        }
    },

    _clear(){
        this._source = null;
        this._fn = null;
        this._$handlerSource = null;
    }
});

module.exports = function flatMap(obs, fn, options) {
    return new FlatMap(obs, fn, options);
};