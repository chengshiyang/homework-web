import Stream from '../Stream';
import Property from '../Property';
import extend from '../polyfill/extend';
import {VALUE, ERROR, END} from '../constants/events';

const commonMixin = {

    init() {},

    _free() {},

    _flush() {
        if (this._buff) {
            this.emitValue(this._buff);
            this._buff = [];
        }
    },

    _handleMainValue(v) {
        this.emitValue(v);
    },

    _handleMainError(err) {
        this.emitError(err);
    },

    _handleMainEnd() {
        this.emitEnd();
    },

    _handleSecondaryValue(v) {
        this._lastSecondary = x;
    },

    _handleSecondaryError(err) {
        this.emitError(err);
    },

    _handleSecondaryEnd() {},

    _onActivation() {
        if (this.state.active) {
            this._mainOb.onAny(this._$handleMainAny);
        }
        if (this._secondaryOb) {
            this._secondaryOb.onAny(this._$handleSecondaryAny);
        }
    },

    _onDeactivation() {
        this._mainOb.offAny(this._$handleMainAny);
        /**
         * NOTE: 这里需要进行判断secondaryOb是否存在，是因为如果secondaryOb先结束
         * 会进行释放，当前流进行Deactivation的时候，secondaryOb已经不存在了。
         * 释放的操作在 _handleSecondaryAny 函数中，
         */
        if (this._secondaryOb) {
            this._secondaryOb.offAny(this._$handlerSecondaryAny);
        }
    },

    _handleMainAny(e) {
        switch(e.type) {
            case VALUE: return this._handleMainValue(e.value);
            case ERROR: return this._handleMainError(e.value);
            case END: return this._handleMainEnd(e.value);
        }
    },

    _handleSecondaryAny(e) {
        switch(e.type) {
            case VALUE: return this._handleSecondaryValue(e.value);
            case ERROR: return this._handleSecondaryError(e.value);
            case END:
                this._handleSecondaryEnd(e.value);
                // NOTE: 移除secondary observable，处于性能考虑
                return this._removeSecondaryOb();
        }
    },

    _removeSecondaryOb() {
        if (this._secondaryOb) {
            this._secondaryOb.offAny(this._$handlerSecondaryAny);
            this._$handlerSecondaryAny = null;
            this._secondaryOb = null;
        }
    },

    _clear() {
        Stream.prototype._clear.call(this);
        this._mainOb = null;
        this._secondaryOb = null;
        this._lastSecondary = null;
        this._$handlerSecondaryAny = null;
        this._$handleMainAny = null;
        this._free();
    }
}


function createConstructor(BaseClass, name, userMixins) {
    function ConnectTwoSource(mainOb, secondaryOb, options) {
        BaseClass.call(this);
        this._mainOb = mainOb;
        this._secondaryOb = secondaryOb;
        this._name = `${mainOb._name}.name`;
        this._$handleMainAny = (e) => this._handleMainAny(e);
        this._$handleSecondaryAny = (e) => this._handleSecondaryAny(e);
        this.init(options);
    }

    ConnectTwoSource.prototype = Object.create(BaseClass.prototype);
    extend(ConnectTwoSource.prototype, commonMixin, userMixins);
    return ConnectTwoSource;
}

function createStream(name, mixins) {
    return createConstructor(Stream, name, mixins);
}

function createProperty(name, mixins) {
    return createConstructor(Property, name, mixins);
}

export { createStream, createProperty};
