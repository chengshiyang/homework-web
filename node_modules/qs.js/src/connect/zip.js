import Stream from '../Stream';
import extend from '../polyfill/extend';
import never from '../functions/never';
import {VALUE, ANY, END, ERROR} from '../constants/events';
import {forEach, concat, fill, map} from '../polyfill/list';
import spread from '../utils/spread';


function Zip(obs, combinator) {
    Stream.call(this);

    this._sources = obs;
    this._buffers = map(this._sources, source => []);
    this._combinator = combinator ? spread(combinator) : (x => x);
    this._$handlers = [];
    this._aliveCount = 0;
    forEach(this._sources, (source, i) => {
        this._$handlers.push((e) => this._handleAny(e, i));
    });
}

Zip.prototype = Object.create(Stream.prototype);

extend(Zip.prototype, {

    _name: 'zip',

    _onActivation () {
        let sourceLen = this._sources.length;
        this._aliveCount = sourceLen;
        for (let i = 0; i < sourceLen; i++) {
            this._sources[i].onAny(this._$handlers[i]);
        }
    },

    _onDeactivation() {
        forEach(this._sources, (source, i) => {
            source.offAny(this._$handlers[i]);
        });
    },

    _handleAny(e, sourceIndex) {
        let type = e.type;
        if (type === VALUE) {
            this._buffers[sourceIndex].push(e.value);
            this._emitValueIfReady();
        } else if (type === ERROR) {
            this.emitError(e.value);
        } else if (type === END) {
            this._aliveCount--;
            if (this._aliveCount === 0) {
                this.emitEnd();
            }
        }
    },

    _emitValueIfReady() {
        var isReady = true;
        forEach(this._buffers, buffer => {
            isReady = isReady && buffer.length > 0
        });
        if (isReady) {
            this._emit();
        }
    },

    _emit() {
        let values = map(this._buffers, buffer => buffer.shift());
        this.emitValue(this._combinator(values));
    },

    _clear() {
        Stream.prototype._clear.call(this);
        this._sources = null;
        this._combinator = null
        this._buffers = null;
        this._$handlers = null;
    }
});

module.exports = function combine(obs, combinator) {
    return obs.length === 0 ? never() : new Zip(obs, combinator);
};