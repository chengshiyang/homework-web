import Observable from './obserable';
import extend from './polyfill/extend';
import {VALUE, END, ERROR} from './constants/events';
import {callSubcribers} from './dispatcher';


function Property() {
    Observable.call(this);
    this._currentEvent = null;
}

Property.prototype = Object.create(Observable.prototype);

extend(Property.prototype, {
    _name: 'property',

    getType() {
        return 'property';
    },

    emitValue(value) {
        if (this.state.alive) {
            this._currentEvent = {type: VALUE, value};
            if (!this._activating) {
                this._dispatcher.dispatch({type: VALUE, value});
            }
        }
    },

    emitEnd() {
        if (this.state.alive) {
            this.setState('alive', false);
            if (!this._activating) {
                this._dispatcher.dispatch({type: END});
            }
            this._clear();
        }
    },

    emitError(value) {
        if (this.state.alive) {
            this._currentEvent = {type: ERROR, value};
            if (!this._activating) {
                this._dispatcher.dispatch({type: ERROR, value});
            }
        }
    },

    _on(type, fn) {
        if (this.state.alive) {
            this._dispatcher.add(type, fn);
            this._setActive(true);
        }
        if (this._currentEvent !== null) {
            callSubcribers(type, fn, this._currentEvent);
        }
        if (!this.state.alive) {
            callSubcribers(type, fn, {type:END});
        }
        return this;
    }
});


export default Property;