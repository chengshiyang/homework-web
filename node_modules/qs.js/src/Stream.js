import Observable from './obserable';
import extend from './polyfill/extend';
import emitter from './emitter';


function Stream(fn) {
    Observable.call(this);
    this._fn = fn;
}

Stream.prototype = Object.create(Observable.prototype);

extend(Stream.prototype, {
    _name: 'stream',

    getType() {
        return 'stream';
    },

    _onActivation() {
        const fn = this._fn;
        const unsubscribe = fn(emitter(this));
        this._unsubscribe = typeof unsubscribe === 'function' ? unsubscribe : null;
    },

    _onDeactivation() {
        this._callUnSub();
    },

    _callUnSub() {
        if (this._unsubscribe !== null) {
            this._unsubscribe();
            this._unsubscribe = null;
        }
    },

    _clear() {
        Observable.prototype._clear.call(this);
        this._fn = null;
    }
});


export default Stream;
